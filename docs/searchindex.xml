<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Uniapp在线更新</title><url>https://itvita.cn/2021/12/12/%E5%9C%A8%E7%BA%BF%E6%9B%B4%E6%96%B0.html</url><categories><category>uniapp</category></categories><tags><tag>uniapp</tag></tags><content type="html"> 说在前面 每次打开app检查版本 此处为强制更新，其他非强制更新，热更新等同理。 上代码 /* APP版本更新 res = { code: 1, data: { version: 200, //版本号 iosLink: '', androidLink: 'http://192.168.1.49:8080/20210913110002.apk', content: '1版本更新内容\n2版本更新内容\n3版本更新内容' } } */ export function checkUpdate() { $api({ url: $config.baseURL + '/v1/appInfo', method: 'GET', data: {} }).then(res => { if (res.code === 1) { const appinfo = res.data plus.runtime.getProperty(plus.runtime.appid, widgetInfo => { const versionCode = widgetInfo.versionCode; if (versionCode &lt; appinfo.version) { uni.showModal({ title: '发现新版本', showCancel: false, confirmText: '立即更新', content: appinfo.content, success: (res) => { if (res.confirm) { if (uni.getSystemInfoSync().platform == 'android') { var w = plus.nativeUI.showWaiting("下载中..."); const downloadTask = uni.downloadFile({ url: appinfo.androidLink, success: downloadResult => { if (downloadResult.statusCode === 200) { plus.runtime.install( downloadResult .tempFilePath, { force: false }, d => { console.log( 'install success...' ); plus.runtime .restart(); }, e => { console.error( 'install fail...' ); } ); } } }); downloadTask.onProgressUpdate((res) => { w.setTitle(" 正在下载" + res.progress + "% "); if(res.progress>=100){ w.close(); } // console.log('下载进度' + res.progress); // console.log('已经下载的数据长度' + res.totalBytesWritten); // console.log('预期需要下载的数据总长度' + res.totalBytesExpectedToWrite); }); } if (uni.getSystemInfoSync().platform == 'ios') { plus.runtime.openURL(appinfo.iosLink, function(res) {}); } } } }) } }) } }) }</content></entry><entry><title>Uniapp消息推送unipush</title><url>https://itvita.cn/2021/12/11/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81unipush.html</url><categories><category>uniapp</category></categories><tags><tag>uniapp</tag></tags><content type="html"> 官方步骤 具体参考官方流程开通，如果需要离线推送，则需要配置厂商通道。
官方UniPush使用指南
不说废话~直上代码。 uniapp前端 app.vue onLaunch
// #ifdef APP-PLUS /* 设置竖屏 */ plus.screen.lockOrientation('portrait-primary'); /* 清除角标 */ plus.runtime.setBadgeNumber(0); // 监听接收透传消息事件,苹果为透传消息 plus.push.addEventListener( 'receive', function(msg) { let payload = {}; if (msg.payload) { console.log('msg.payload', msg.payload); payload = JSON.parse(msg.payload); if (payload.t) { return; } } payload.t = true; plus.push.createMessage(msg.content, JSON.stringify(payload), { title: msg.title }); }, false ); // #endif index.vue onLoad
// #ifdef APP-PLUS // 监听系统通知栏消息点击事件 plus.push.addEventListener( 'click', function(msg) { let payload = msg.payload; if (payload instanceof String) { payload = JSON.parse(payload); } /*跳转到对应页面*/ uni.navigateTo({ url: payload.url }); }, false ); // #endif login.vue done
// 推送cid const clientInfo = plus.push.getClientInfo(); const clientid = clientInfo.clientid; /* 设备类型 */ const brand = uni.getSystemInfoSync().brand; /* save */ addOrUpdate({ userId: userInfo.id, mobileBrand: brand, mobileCid: clientid }); java
package com.itvita.utils.push; import com.alibaba.fastjson.JSONObject; import com.getui.push.v2.sdk.ApiHelper; import com.getui.push.v2.sdk.GtApiConfiguration; import com.getui.push.v2.sdk.api.PushApi; import com.getui.push.v2.sdk.common.ApiResult; import com.getui.push.v2.sdk.dto.req.Audience; import com.getui.push.v2.sdk.dto.req.Settings; import com.getui.push.v2.sdk.dto.req.Strategy; import com.getui.push.v2.sdk.dto.req.message.PushChannel; import com.getui.push.v2.sdk.dto.req.message.PushDTO; import com.getui.push.v2.sdk.dto.req.message.PushMessage; import com.getui.push.v2.sdk.dto.req.message.android.AndroidDTO; import com.getui.push.v2.sdk.dto.req.message.android.ThirdNotification; import com.getui.push.v2.sdk.dto.req.message.android.Ups; import com.getui.push.v2.sdk.dto.req.message.ios.Alert; import com.getui.push.v2.sdk.dto.req.message.ios.Aps; import com.getui.push.v2.sdk.dto.req.message.ios.IosDTO; import com.itvita.utils.IdGenerator; import lombok.extern.slf4j.Slf4j; import java.util.Map; /** * 推送工具类（个推） * * @Author: liu.q * @Date: 2020/4/26 13:41 */ @Slf4j public class UniPush { /* unipush 后台配置 */ private static final String AppID = ""; private static final String appKey = ""; private static final String masterSecret = ""; private static final String domain = "https://restapi.getui.com/v2/"; /** * 根据cid单推 * * @param cid: 推送设备唯一标识 * @param title: 通知标题 * @param body: 通知内容 * @param payload: 参数（长度不能超过100，可以为json字符串） * @return: void * @Time: 2021/9/7 9:52 上午 * @author: liu.q [916000612@qq.com] */ public static void toSingleCid(String cid, String title, String body, String payload) { GtApiConfiguration apiConfiguration = new GtApiConfiguration(); //填写应用配置 apiConfiguration.setAppId(AppID); apiConfiguration.setAppKey(appKey); apiConfiguration.setMasterSecret(masterSecret); apiConfiguration.setDomain(domain); // 实例化ApiHelper对象，用于创建接口对象 ApiHelper apiHelper = ApiHelper.build(apiConfiguration); // 创建对象，目前有PushApi、StatisticApi、UserApi PushApi pushApi = apiHelper.creatApi(PushApi.class); //根据cid进行单推 PushDTO&lt;Audience> pushDTO = new PushDTO&lt;>(); // 请求唯一标识号，10-32位之间；如果request_id重复，会导致消息丢失 pushDTO.setRequestId(IdGenerator.getUUID()); /*推送目标用户*/ Audience audience = new Audience(); audience.addCid(cid); pushDTO.setAudience(audience); /*推送条件设置*/ Settings settings = new Settings(); settings.setTtl(3600000);//消息有效期，走厂商消息需要设置该值 Strategy strategy = new Strategy(); // 1: 表示该消息在用户在线时推送个推通道，用户离线时推送厂商通道; // 2: 表示该消息只通过厂商通道策略下发，不考虑用户是否在线; // 3: 表示该消息只通过个推通道下发，不考虑用户是否在线； // 4: 表示该消息优先从厂商通道下发，若消息内容在厂商通道代发失败后会从个推通道下发。 strategy.setDef(4); settings.setStrategy(strategy); pushDTO.setSettings(settings); /*个推推送消息参数*/ PushMessage pushMessage = new PushMessage(); JSONObject param = new JSONObject(); param.put("title", title); param.put("content", body); param.put("payload", payload); pushMessage.setTransmission(param.toJSONString()); pushDTO.setPushMessage(pushMessage); /*厂商推送消息参数，包含ios消息参数，android厂商消息参数*/ PushChannel pushChannel = new PushChannel(); /*苹果推送参数*/ IosDTO iosDTO = new IosDTO(); iosDTO.setType("notify");//voip：voip语音推送，notify：apns通知消息 /*推送通知消息内容*/ Aps aps = new Aps(); aps.setContentAvailable(0); aps.setSound("default"); /*推送苹果离线通知标题内容*/ Alert alert = new Alert(); alert.setTitle(title+"苹果的标题"); alert.setBody(body+"苹果的body"); aps.setAlert(alert); iosDTO.setAps(aps); iosDTO.setAutoBadge("+1"); iosDTO.setPayload(payload);// 苹果自定义数据内容 iosDTO.setApnsCollapseId(IdGenerator.getUUID());//使用相同的apns-collapse-id可以覆盖之前的消息 pushChannel.setIos(iosDTO); /*安卓推送参数*/ AndroidDTO androidDTO = new AndroidDTO(); /*android厂商通道推送消息内容*/ Ups ups = new Ups(); /*安卓离线厂商通道推送透传消息体*/ // ups.setTransmission(payload); /*安卓离线厂商通道推送通知消息体*/ ThirdNotification notification = new ThirdNotification(); notification.setTitle(title); notification.setBody(body); notification.setClickType("intent"); notification.setIntent("intent:#Intent;action=android.intent.action.oppopush;launchFlags=0x14000000;component=com.itvita.norisk.company/io.dcloud.PandoraEntry;S.UP-OL-SU=true;S.title=" + title + ";S.content=" + body + ";S.payload="+payload+";end"); ups.setNotification(notification); //各厂商自有功能单项设置 //各厂商自有功能单项设置 ups.addOption("HW", "/message/android/notification/badge/class", "io.dcloud.PandoraEntry"); ups.addOption("HW", "/message/android/notification/badge/add_num", 1); ups.addOption("HW", "/message/android/notification/importance", "HIGH"); ups.addOption("VV","classification",1); androidDTO.setUps(ups); pushChannel.setAndroid(androidDTO); pushDTO.setPushChannel(pushChannel); // 进行cid单推 ApiResult&lt;Map&lt;String, Map&lt;String, String>>> apiResult = pushApi.pushToSingleByCid(pushDTO); if (apiResult.isSuccess()) { // success log.info("推送成功：{}", apiResult.getData()); } else { // failed log.error("推送失败：cid:{},code:{}, msg:{}" ,cid, apiResult.getCode() , apiResult.getMsg()); } } public static void main(String[] args) { JSONObject param = new JSONObject(); param.put("id", "111"); param.put("type", "native"); toSingleCid("bb94fce97ee07c59fce32544ef7b9521", "推送测试", "推送内容", param.toJSONString()); } }</content></entry><entry><title>Vscode配置</title><url>https://itvita.cn/2021/12/05/vscode%E9%85%8D%E7%BD%AE.html</url><categories><category>开发工具</category></categories><tags><tag>vscode</tag></tags><content type="html"> { "workbench.colorTheme": "Atom One Dark", "workbench.iconTheme": "vscode-icons-mac", "editor.fontFamily": "Courier New", "editor.fontSize": 18, // "files.autoSave": "afterDelay", //打开自动保存 "editor.lineHeight": 20, //设置文字行高 // "editor.lineNumbers": "on", //开启行数提示 // "window.zoomLevel": 0, // 调整窗口的缩放级别 // "editor.detectIndentation": false, // "emmet.triggerExpansionOnTab": true, // "editor.formatOnSave": true, // eslint保存格式化 // "javascript.format.enable": false, // 不启动JavaScript格式化 // "prettier.eslintIntegration": true, // "[vue]": { // "editor.defaultFormatter": "esbenp.prettier-vscode" // } // 让prettier遵循eslint格式美化 "editor.tabSize": 2, "files.associations": { "*.vue": "vue" }, "eslint.codeActionsOnSave": true, "eslint.options": { "extensions": [".js", ".vue"] }, // "eslint.validate": [ // "javascript",{ // "language": "vue", // "autoFix": true // },"html", // "vue" // ], "search.exclude": { "**/node_modules": true, "**/bower_components": true, "**/dist": true }, "emmet.syntaxProfiles": { "javascript": "jsx", "vue": "html", "vue-html": "html" }, "git.confirmSync": false, "editor.renderWhitespace": "boundary", "editor.cursorBlinking": "smooth", "editor.minimap.enabled": true, "editor.minimap.renderCharacters": false, "window.title": "${dirty}${activeEditorMedium}${separator}${rootName}", "editor.codeLens": true, "editor.snippetSuggestions": "top", "editor.codeActionsOnSave": { "source.fixAll.eslint": true }, "[vue]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }, "git.enableSmartCommit": true, "[jsonc]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }, "[javascript]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }, "[html]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }, "files.autoSave": "onFocusChange", "backgroung.enable": true, "background.useDefault": false, "background.customImages": ["file:///Users/liuqiang/Pictures/7天/1Y1A0798.jpg"], "background.style": { "content": "''", "pointer-events": "none", "position": "fixed", "top": "0", "right": "0", "width": "100%", "height": "100%", "z-index": "99999", // "background.repeat": "no-repeat", // contain "background-size": "cover", "opacity": 0.1 // "opacity": 0 }, "explorer.confirmDelete": false, "[json]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }, "explorer.confirmDragAndDrop": false, "javascript.updateImportsOnFileMove.enabled": "always", "vetur.format.defaultFormatterOptions": { "js-beautify-html": { "wrap_attributes": "force-expand-multiline" }, "prettyhtml": { "printWidth": 100, "singleQuote": false, "wrapAttributes": false, "sortAttributes": false } }, "node-module-intellisense.modulePaths": [ ], "editor.accessibilitySupport": "on", "git.autofetch": true }</content></entry><entry><title>VSCode使用背景图设置</title><url>https://itvita.cn/2021/12/05/%E4%BD%BF%E7%94%A8%E8%83%8C%E6%99%AF%E5%9B%BE%E8%AE%BE%E7%BD%AE.html</url><categories><category>开发工具</category></categories><tags><tag>vscode</tag></tags><content type="html"> 下载地址
点我下载
中文设置 cmd+Shift+p，在搜索框中输入“configure display language” 点击确定 选择zh-cn 然后重启 背景图设置 安装background插件 配置setting.json增加： "backgroung.enable": true, "background.useDefault": false, "background.customImages": ["file:///Users/liuqiang/Pictures/1581747557830.jpg"], "background.style": { "content": "''", "pointer-events": "none", "position": "fixed", "top": "0", "right": "0", "width": "100%", "height": "100%", "z-index": "99999", // "background.repeat": "no-repeat", // contain "background-size": "cover", "opacity": 0.1 } 注意：顶部会出现[不受支持]（无所谓，可忽略）,提示损坏xxx ，选择不在提示即可</content></entry><entry><title>CentOS创建sftp账号</title><url>https://itvita.cn/2021/10/03/%E5%88%9B%E5%BB%BAsftp%E8%B4%A6%E5%8F%B7.html</url><categories><category>CentOS</category></categories><tags><tag>sftp</tag><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 使用系统自带的internal-sftp搭建SFTP服务器。 打开命令终端窗口，按以下步骤操作。
1、查看openssh的版本
ssh -V 使用ssh -V 命令来查看openssh的版本，版本必须大于4.8p1，低于的这个版本需要升级。
2、创建sftp组
groupadd sftp 3、创建一个sftp用户，用户名为mysftp2020，密码为mysftp2020
修改用户密码和修改Linux用户密码是一样的：
注意：这里我们将mysftp2020用户的shell设置为/bin/false使他没有登陆shell的权限
useradd -g sftp -s /bin/false mysftp2020 //用户名 passwd mysftp2020 //密码 4、sftp组的用户的home目录统一指定到/data/sftp下，按用户名区分，这里先新建一个mysftp2020目录，然后指定mysftp2020的home为/data/sftp/mysftp2020 sftp组的用户的home目录统一指定到/data/sftp下
mkdir -p /data/sftp/mysftp2020 然后指定mysftp2020的home为/data/sftp/mysftp2020
usermod -d /data/sftp/mysftp2020 mysftp2020
5、配置sshd_config
vim /etc/ssh/sshd_config 找到如下这行，用#符号注释掉，大致在文件末尾处。
#Subsystem sftp /usr/libexec/openssh/sftp-server 在文件最后面添加如下几行内容，然后保存。
Subsystem sftp internal-sftp #匹配sftp组的用户，如果有多个组用逗号分割 也可以使用“Match Match Group sftp #User mysftp2020”匹配用户，多个用户之间也是用逗号分割 #用chroot将用户的根目录指定到/data/ftp/%u,%u代表用户名,%h表示用户根目录 ChrootDirectory /data/sftp/%u #指定sftp命令 ForceCommand internal-sftp AllowTcpForwarding no #禁止用户使用端口转发 建立用户和组放 X11Forwarding no 6、设定Chroot目录权限
chown root:sftp /data/sftp/mysftp2020 chmod 755 /data/sftp/mysftp2020 7、建立SFTP用户登入后可写入的目录 照上面设置后，在重启sshd服务后，用户mysftp2020已经可以登录。但使用chroot指定根目录后，根应该是无法写入的，所以要新建一个目录供mysftp2020上传文件。这个目录所有者为mysftp2020，所有组为sftp，所有者有写入权限，而所有组无写入权限。命令如下：
mkdir /data/sftp/mysftp2020/upload chown mysftp2020:sftp /data/sftp/mysftp2020/upload chmod 755 /data/sftp/mysftp2020/upload 8、修改/etc/selinux/config
vim /etc/selinux/config 将文件中的SELINUX=enforcing 修改为 SELINUX=disabled ，然后保存。
再输入命令
setenforce 0 9、重启sshd服务
service sshd restart 10、验证sftp环境 用mysftp2020用户名登录，yes确定，回车输入密码。
sftp mysftp2020@127.0.0.1 显示 sftp> 则sftp搭建成功。
11、使用FileZilla FTP Client连接SFTP服务器
输入主机IP地址、用户名、密码、端口连接SFTP服务器，端口默认为22。</content></entry><entry><title>CentOS7配置Maven</title><url>https://itvita.cn/2021/10/03/centos%E9%85%8D%E7%BD%AEmaven.html</url><categories><category>CentOS</category></categories><tags><tag>maven</tag><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 下载 wget https://dlcdn.apache.org/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz 解压 tar -zxvf apache-maven-3.8.2-bin.tar.gz 配置环境变量 vim /etc/profile export MAVEN_HOME=/opt/apache-maven-3.8.2 export PATH=$PATH:$MAVEN_HOME/bin 刷新配置 source /etc/profile</content></entry><entry><title>CentOS7配置JDK</title><url>https://itvita.cn/2021/10/03/centos%E9%85%8D%E7%BD%AEjdk.html</url><categories><category>CentOS</category></categories><tags><tag>jdk</tag><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 下载 http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
解压 tar -zxvf jdk-8u271-linux-x64.tar.gz.tar.gz 配置环境变量 #vim /etc/profile -- 所有用户生效 #vim ~/.bash_profile --当前用户生效 JAVA_HOME=/opt/jdk1.8.0_271 JRE_HOME=/opt/jdk1.8.0_271/jre CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$JAVA_HOME/bin:$PATH export PATH JAVA_HOME CLASSPATH 刷新 source /etc/profile</content></entry><entry><title>CentOS7安装redis</title><url>https://itvita.cn/2021/10/03/centos%E5%AE%89%E8%A3%85redis.html</url><categories><category>CentOS</category></categories><tags><tag>redis</tag><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 1、redis最新版下载地址 redis官网
GitHub
2、下载 wget https://download.redis.io/releases/redis-6.0.9.tar.gz 3、解压并进入目录 tar -zxvf redis-6.0.9.tar.gz cd redis-6.0.9 4、编译安装 make &amp;&amp; make install 5、移动脚本&amp;配置文件 把redis-6.0.9/src目录下的mkreleasehdr.sh，redis-benchmark， redis-check-rdb， redis-cli， redis-server拷贝到redis-6.0.9/bin目录
并授予可执行权限 ，chmod + x *
6、修改redis.conf #修改为守护模式 daemonize yes #设置进程锁文件 pidfile /Users/liuqiang/tools/redis/redis_639.pid #端口 port 6379 #客户端超时时间 timeout 300 #日志级别 loglevel debug #日志文件位置 logfile /Users/liuqiang/tools/redis/log-redis.log #设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid>命令在连接上指定数据库id databases 16 ##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 #save &lt;seconds> &lt;changes> #Redis默认配置文件中提供了三个条件： save 900 1 save 300 10 save 60 10000 #指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间， #可以关闭该#选项，但会导致数据库文件变的巨大 rdbcompression yes #指定本地数据库文件名 dbfilename dump.rdb #指定本地数据库路径 dir /Users/liuqiang/tools/redis/db/ #指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能 #会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有 #的数据会在一段时间内只存在于内存中 appendonly no #指定更新日志条件，共有3个可选值： #no：表示等操作系统进行数据缓存同步到磁盘（快） #always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） #everysec：表示每秒同步一次（折衷，默认值） appendfsync everysec #密码 requirepass 123456 7、启动 进入redis-6.0.9目录
./bin/redis-server ./redis.conf 8、停止 ps -ef|grep redis kill -9 pid make[1]: *** [server.o] 错误 1 原因是因为gcc版本过低，yum安装的gcc是4.8.5的。因此需要升级gcc，升级过程如下
yum -y install centos-release-scl yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils #这句是临时的 scl enable devtoolset-9 bash #修改环境变量 echo "source /opt/rh/devtoolset-9/enable" >> /etc/profile gcc -v</content></entry><entry><title>CentOS7安装Nginx</title><url>https://itvita.cn/2021/10/03/centos%E5%AE%89%E8%A3%85nginx.html</url><categories><category>CentOS</category></categories><tags><tag>nginx</tag><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 下载地址 nginx官网
下载 wget http://nginx.org/download/nginx-1.18.0.tar.gz 安装依赖包 yum install gcc gcc-c++ pcre* openssl* gd-devel* zlib-devel pcre-devel 解压并进入目录 tar –zxvf nginx-1.18.0.tar.gz cd nginx-1.18.0 创建nginx用户 useradd -M -s /sbin/nologin nginx 配置编译参数 ./configure --prefix=/opt/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-stream --with-stream_ssl_module #./configure –help 安装 make &amp;&amp; make install 启动 cd /opt/nginx/sbin ./nginx 其它 刷新配置 ./nginx -s reload 停止 ./nginx -s stop 配置 腾讯云证书https的基本配置 upstream myproject { server 127.0.0.1:8000 weight=3; //weight 权重，数字越大轮到的几率越大 server 127.0.0.1:8001; server 127.0.0.1:8002; server 127.0.0.1:8003; } #myMiniProgram server { listen 80; server_name xx.com; rewrite ^(.*)$ https://$host$1 permanent; } server { #SSL 访问端口号为 443 listen 443 ssl; #填写绑定证书的域名 server_name cloud.tencent.com; #证书文件名称 ssl_certificate 1_cloud.tencent.com_bundle.crt; #私钥文件名称 ssl_certificate_key 2_cloud.tencent.com.key; ssl_session_timeout 5m; #请按照以下协议配置 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; #代理转发 location / { #自定义请求头内容 proxy_set_header X-Forwarded-Scheme https; proxy_set_header X-Forwarded-port 443; client_max_body_size 1000m; #设置主机头和客户端真实地址，以便服务器获取客户端真实IP proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; #禁用缓存 proxy_buffering off; #反向代理的地址 proxy_pass http://localhost:7878; # proxy_pass http://myproject; #用这行代替上面，实现负载均衡 #启用支持websocket连接 proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; } #静态代理 location /admin { alias /usr/local/mymini/cpp-web; index login.html; } } srpingboot request.get&hellip;uri ,还是http怎么办？ 配置tomcat
server.tomcat.protocol-header=X-Forwarded-Proto # ssl forward headers server.tomcat.remote-ip-header=X-Forwarded-For 代理tcp协议链接mysql stream { upstream cloudsocket { hash $remote_addr consistent; # $binary_remote_addr; server 127.0.0.1:3306 weight=5 max_fails=3 fail_timeout=30s; } server { listen 3306;#数据库服务器监听端口 proxy_connect_timeout 10s; proxy_timeout 300s;#设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。 proxy_pass cloudsocket; } }</content></entry><entry><title>CentOS7安装mysql</title><url>https://itvita.cn/2021/10/03/centos%E5%AE%89%E8%A3%85mysql.html</url><categories><category>CentOS</category></categories><tags><tag>mysql</tag><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 安装 1、检查Linux是否安装了mariadb数据库，mariadb数据库是mysql的分支
#执行命令： yum list installed | grep mariadb 2、如果Linux中安装了mariadb数据库，先卸载掉，因为CentOS 7.6 内部集成了mariadb，而安装mysql的话会和mariadb的文件冲突，所以需要先卸载掉mariadb
#执行命令： yum -y remove mariadb-libs.x86_64 3、下载mysql安装包
#执行命令： wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz #然后移动到/usr/local下 mv mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz /usr/local 4、解压
#解压tar包： tar -xvf mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz #解压下载下来的mysql软件压缩包，执行命令： tar -zxvf mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz 5、更名
#解压下载下来的mysql软件压缩包，执行命令： mv mysql-5.7.32-linux-glibc2.12-x86_64 mysql #然后进入目录 cd mysql 6、在mysql-5.7.32文件夹目录下创建一个/data/3306文件夹
#执行命令： mkdir -vp ./data #（v表示创建新目录都显示信息，p表示递归创建） 7、添加mysql用户及用户组
#执行命令： groupadd mysql useradd mysql -g mysql #（-g: 是指定用户所在组） 8、切换到./bin目录下执行：
./mysqld --initialize-insecure --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql #（--initialize-insecure标识不设置密码， root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.） 9、在mysql/bin目录下
#执行命令： ./mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data （表示安全连接访问，生成RSA私钥） 10、更改mysql-5.7.32整个文件夹目录权限所属
#执行命令： chown -R mysql:mysql /usr/local/mysql （-R表示迭代递归） #chmod：文件/目录权限设置命令 11、在/etc 目录下创建my.cnf文件
[client] port = 3306 socket = /opt/mysql5.7.32/data/3306/mysql.sock default-character-set=utf8 [mysqld] port = 3306 socket = /opt/mysql5.7.32/data/3306/mysql.sock datadir = /opt/mysql5.7.32/data/3306 log-error = /opt/mysql5.7.32/data/3306/error.log pid-file = /opt/mysql5.7.32/data/3306/mysql.pid lower_case_table_names=1 character-set-server=utf8mb4 #skip-grant-tables [mysql] default-character-set=utf8mb4 至此MySQL安装完成;
12、启动MySQL服务
#在mysql-5.7.24/bin目录下执行命令： ./mysqld_safe --defaults-file=/etc/my.cnf 13、修改密码
#登录进入mysql，在mysql-5.7.32/bin目录下执行命令： ./mysql -uroot -p -P3306 -h127.0.0.1 #修改mysql的密码，执行： alter user 'root'@'localhost' identified by '123456'; #然后刷新 flush privileges; 14授权远程访问
#登录进入mysql执行命令：（这样远程客户端才能访问） grant all privileges on *.* to root@'%' identified by '123456'; #其中*.* 的第一个*表示所有数据库名，第二个*表示所有的数据库表； #root@'%' 中的root表示用户名，%表示ip地址，%也可以指定具体的ip地址，比如root@localhost，root@xx.xx.xx.xx #然后刷新 flush privileges; 15、关闭MySQL服务
# 进入mysql-5.7.32/bin目录下执行命令： ./mysqladmin -uroot -p -P3306 -h127.0.0.1 shutdown 配置环境变量 #vim /etc/profile -- 所有用户生效 #vim ~/.bash_profile --当前用户生效 export MYSQL_HOME="/usr/local/mysql" export PATH="$PATH:$MYSQL_HOME/bin" 刷新环境变量 source /etc/profile 设置到开机启动 cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld cp //usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysql chmod 700 /etc/init.d/mysql # 加入到系统服务命令 chkconfig --add mysqld chkconfig --level 2345 mysqld on 其他命令 #启动 service mysql start #停止 service mysql stop #重启 service mysql restart</content></entry><entry><title>Xui-Admin帮助文档</title><url>https://itvita.cn/2021/09/03/min%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.html</url><categories><category>npm</category></categories><tags><tag>插件</tag><tag>vue</tag></tags><content type="html"> 图片上传 示例 代码 &lt;template> &lt;div> &lt;xui-image-upload baseUrl="https://norisk-dev-1305901002.cos.ap-chengdu.myqcloud.com/" action="http://192.168.1.59:9001/app/company/h5/v1/common/ant/upload" :headers="headers" v-model="images" :maxNum="3" >&lt;/xui-image-upload > &lt;/div> &lt;/template> &lt;script> export default { data () { return { headers: { xxx: 'xxxxxxx' }, images: [ { name: '测试1', original: '20210910/3ec7557b2a0d40a69b58b9f16a7cf2b1.png?imageMogr2/format/tpg', path: '20210910/3ec7557b2a0d40a69b58b9f16a7cf2b1.png' } ] } }, mounted () {}, methods: {} } &lt;/script> &lt;style scoped lang="less">&lt;/style> 属性 属性 说明 类型 默认值 baseUrl 图片访问跟地址 String action 文件上传地址 String headers 上传header Object {} v-model 绑定数据 Array [] maxNum 最大上传数量 Number 5 size 大小限制，单位MB Number 2 accept 限制格式 String .png, .jpg, .jpeg, .gif 事件 事件名称 说明 回调参数 done 上传完成调用 function(values) ztree树形展示 示例 代码 &lt;template> &lt;div> &lt;xui-ztree ref="ztree" /> &lt;/div> &lt;/template> &lt;script> export default { components: {}, data () { return {} }, mounted () { var zNodes = [ { id: '1', areaCode: '110000000000', name: '北京市', sysCode: '100', pId: '0' }, { id: '2', areaCode: '120000000000', name: '天津市', sysCode: '101', pId: '0' }, { id: '3', areaCode: '130000000000', name: '河北省', sysCode: '102', pId: '0' }, { id: '1-1', areaCode: '130000000000', name: '河北省', sysCode: '102', pId: '1' } ] var root = { open: true, id: 0, pId: -1, name: '公司根目录', icon: 'https://cdn.jsdelivr.net/gh/itvita/liuqiang@master/nage/gongsi.png' } zNodes.forEach(d => { d.icon = 'https://cdn.jsdelivr.net/gh/itvita/liuqiang@master/nage/gongsi.png' }) zNodes.push(root) this.$refs.ztree.init(zNodes) }, methods: {} } &lt;/script> &lt;style scoped lang="less">&lt;/style> 事件 事件名称 回调参数 说明 click function(values) 点击事件，选中项的数据 方法 方法名称 参数 说明 init 树形简单数据[{id,name,pId}] 树形初始化 多选 示例 代码 &lt;template> &lt;div> &lt;xui-multiple-choice ref="xMultipleChoice" :multiple="true" @change="handelChange" :dataSource="data" /> &lt;a @click="done">获取选择结果&lt;/a> &lt;/div> &lt;/template> &lt;script> export default { data () { const data = [ { name: '现场管理', children: [] }, { name: '基础管理', children: [] } ] for (var i = 0; i &lt; data.length; i++) { for (var x = 0; x &lt; 10; x++) { data[i].children.push({ id: i + '' + x, name: i + '-测试数据' + x }) } } return { data: data } }, mounted () {}, methods: { /** * @Time: 2021-07-23 23:05:02 * @author: liu.q [916000612@qq.com] * @des: item 当前操作项, type【'selected'选择，'unselected'取消选择】, selectIds 最终结果id数组 * */ handelChange ({ item, type, selectIds }) { console.log(item, type, selectIds) }, /** * @Time: 2021-07-23 23:06:14 * @author: liu.q [916000612@qq.com] * @des: 获取最终选择结果 * */ done () { /* 获取选中ID */ const selectIds = this.$refs.xMultipleChoice.getSelectIds() console.log(selectIds) /* 获取选中对象 */ const selectObjects = this.$refs.xMultipleChoice.getSelectObjects() console.log(selectObjects) } } } &lt;/script> &lt;style scoped lang="less">&lt;/style> 属性 属性 说明 类型 默认值 multiple 是否多选 Boolean false dataSource 数据源，两级数组[{id,name,children}] Array 事件 事件名称 回调参数 说明 change function({ item, type, selectIds }) 选项改变，item 当前操作项, type【&lsquo;selected&rsquo;选择，&lsquo;unselected&rsquo;取消选择】, selectIds 最终结果id数组 方法 方法名称 参数 说明 getSelectIds 获取选中ID getSelectObjects 获取选中对象 描述列表 示例 代码 &lt;template> &lt;div> &lt;xui-descriptions label-width="200px" label="测试标题" > 斐济电视剧覅哦啊江东四杰佛i啊惊世毒妃 &lt;/xui-descriptions> &lt;xui-descriptions label="测试标题" label-width="200px"> 斐济电视剧覅 &lt;/xui-descriptions> &lt;xui-descriptions label="测试标题" label-width="200px"> &lt;div>&lt;img src="fidjsif"/>&lt;/div> &lt;/xui-descriptions> &lt;/div> &lt;/template> &lt;script> export default { data () { return {} }, mounted () {}, methods: {} } &lt;/script> &lt;style scoped lang="less">&lt;/style> 属性 属性 说明 类型 默认值 label 标题 String label-width 标题宽度，单位px String 0px 图片预览 示例 代码 &lt;template> &lt;div> &lt;xui-image-preview :showBtn="true" :showName="false" width="100px" height="100px" :baseUrl="baseUrl" url="path" v-model="ImgList" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return { baseUrl: 'https://norisk-prod-1305901002.cos.ap-chengdu.myqcloud.com/', ImgList: [ { name: '测试', path: '20211015/f9cec9d0e43d4edb91c69d5d2b9389b0.jpg' }, { name: '测试', path: '20211015/f9cec9d0e43d4edb91c69d5d2b9389b0.jpg' }, { name: '测试', path: '20211015/f9cec9d0e43d4edb91c69d5d2b9389b0.jpg' }, { name: '测试', path: '20211015/f9cec9d0e43d4edb91c69d5d2b9389b0.jpg' }, { name: '测试', path: '20211015/f9cec9d0e43d4edb91c69d5d2b9389b0.jpg' } ] } }, mounted () {}, methods: {} } &lt;/script> &lt;style scoped lang="less">&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 数据[{name:xx,url:xx}] Array [] url url 键名 String url baseUrl 图片访问跟域名 String '&rsquo; width 宽 String 100px height 高 String 100px showBtn 是否显示预览 删除按钮 Boolean false showName 是否显示图片名称 Boolean false 事件 事件名称 回调参数 说明 change function(newData) 图片列表改变后的数组 delete function(newData,delData) 删除事件，newData删除后的结果，delData删除数据 富文本 示例 代码 &lt;template> &lt;div> &lt;xui-editor v-model="values" @change="handelChange" placeholder="输入内容提示文字。。。" :action="action" :basePath="basePath" :height="300" :headers="headers" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return { action: 'https://apis.norisk.com.cn/app/company/v1/common/ant/upload', // 文件上传地址 basePath: 'https://norisk-prod-1305901002.cos.ap-chengdu.myqcloud.com/', // 文件预览跟地址 values: '&lt;p>我是默认内容&lt;/p>', headers: { 'token':'111111' } } }, mounted () {}, methods: { handelChange () { console.log(this.values) } } } &lt;/script> &lt;style scoped lang="less">&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 数据(html内容) String '&rsquo; action 文件上传地址 String '' basePath 图片访问跟路径 String '' placeholder 空内容提示性文字 String 请输入内容&hellip; height 高(单位px) Number 300 headers 自定义header Object {} 事件 事件名称 回调参数 说明 change function(newValue) 内容改变触发</content></entry><entry><title>Git分支与合并</title><url>https://itvita.cn/2021/08/12/%E5%90%88%E5%B9%B6.html</url><categories><category>git</category></categories><tags><tag>git</tag></tags><content type="html"> title: git分支与合并 categories: [&ldquo;工具&rdquo;] uniqueId: &lsquo;2021-08-27 03:07:38/git分支与合并.html&rsquo; date: 2021-08-27 11:07:38 thumbnail: https://cdn.jsdelivr.net/gh/itvita/resources@master/images/20210827110836.jpeg tags: 工具 keywords: git 通过本地分支创建远程分支 创建并切换到本地分支
git checkout -b 分支名称 查看分支
git branch 同步并创建远程分支
git push --set-upstream origin 分支名称 切换分支
git checkout 分支名称（默认主分支：master） 如果本地没有分支，同步远程分支 更新远程主机origin 整理分支
git remote update origin --prune 列出远程分支
git branch -r 可以利用 git checkout &ndash;track origin/branch_name ，这时本地会新建一个分支名叫 branch_name ，会自动跟踪远程的同名分支 branch_name
git checkout --track origin/分支名称 或者新建本地分支gpf与远程gpf分支相关联
git checkout -b gpf origin/分支名称 合并分支到master上 首先切换到master分支上
git checkout master 如果是多人开发的话 需要把远程master上的代码pull下来
git pull origin master 然后我们把dev分支的代码合并到master上
git merge dev 然后查看状态
git status</content></entry><entry><title>Mac配置多jdk随意切换</title><url>https://itvita.cn/2021/06/20/jdk%E9%9A%8F%E6%84%8F%E5%88%87%E6%8D%A2.html</url><categories><category>MAC</category></categories><tags><tag>mac</tag><tag>jdk</tag></tags><content type="html"> 下载安装 jdk6：https://support.apple.com/kb/DL1572?locale=zh_CN
配置环境变量 open .bash_profile
export PATH=$PATH:/usr/local/apache-tomcat-7.0.79/bin export JAVA_6_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home export JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home export JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home
设置默认的jdk版本 export JAVA_HOME=$JAVA_8_HOME
设置alias 用于切换 alias jdk8=&lsquo;export JAVA_HOME=$JAVA_8_HOME&rsquo; alias jdk7=&lsquo;export JAVA_HOME=$JAVA_7_HOME&rsquo; alias jdk6=&lsquo;export JAVA_HOME=$JAVA_6_HOME&rsquo;
保存退出
source .bash_profile
切换jdk 　输入 jdk6，再输入java -version 查看当前版本即可实现动态切换，jdk7，jdk8同样。</content></entry><entry><title>Js通过url下载文件</title><url>https://itvita.cn/2021/06/20/l%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6.html</url><categories><category>前端</category></categories><tags><tag>javaScript</tag></tags><content type="html"> fetch(src).then(res => res.blob().then(blob => { let a = document.createElement('a'); let url = window.URL.createObjectURL(blob); a.href = url; a.download = name; a.click(); window.URL.revokeObjectURL(url); }))</content></entry><entry><title>Git从版本库中移除文件</title><url>https://itvita.cn/2021/05/12/%E5%BA%93%E4%B8%AD%E7%A7%BB%E9%99%A4%E6%96%87%E4%BB%B6.html</url><categories><category>git</category></categories><tags><tag>git</tag></tags><content type="html"> 如果你想把一个文件从版本控制中移除，并且保留本地的文件，首先需要把这个文件加入到gitignore文件中。然后执行以下命令就可以了
git rm file_path --cached 以上命令将file_path所代表的文件从版本控制中删除，并保留本地文件，此外还要进行commit操作才能将服务端的文件删掉。如果想把一个文件夹从版本控制中删除并保留本地的文件，只需在上述命令的基础上加上-r参数，即
git rm -r folder_path --cached 如果想把所有gitignore中的文件从版本控制中删除的话，需要执行以下两个命令，即先移除所有文件，再执行添加所有文件（这次会忽略gitignore中的文件）。
git rm -r . --cached git add .</content></entry><entry><title>Centos安装gitblit</title><url>https://itvita.cn/2021/03/21/%E5%AE%89%E8%A3%85gitblit.html</url><categories><category>CentOS</category></categories><tags><tag>gitblit</tag><tag>git</tag><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 下载 http://gitblit.github.io/gitblit/
安装 上传到centos /opt下，解压为 gitblit 进入gitblit/data 修改默认配置文件 default.properties
server.httpPort = 8088 #访问端口 server.httpsPort = 0 (#0表示禁用此https端口，根据个人需求设置) server.httpBindInterface = 主机IP (#默认为空，也可写成主机IP，为空时则可以通过远程访问gitblit，建议为空) 启动 ./gitblit.sh 后台启动： nohup ./gitblit.sh &amp; 配置nginx访问 1.nginx转发配置
#gitblit server { listen 80; server_name 域名; location / { proxy_pass http://localhost:8088/; } } 2.转码问题 （无法加载目录）
default.properties
web.forwardSlashCharacter = ! 3.仓库地址问题
web.canonicalUrl = http://域名</content></entry><entry><title>Centos安装字体</title><url>https://itvita.cn/2021/03/15/%E5%AE%89%E8%A3%85%E5%AD%97%E4%BD%93.html</url><categories><category>CentOS</category></categories><tags><tag>linux</tag><tag>centos7</tag></tags><content type="html"> 事先安装 yum -y install fontconfig yum -y install mkfontscale 查看已安装字体 fc-list 查看linux已安装中文字体 fc-list :lang=zh 安装字体 1. 进入字体目录 cd /usr/share/fonts 2. 新建目录 myfonts mkdir myfonts 3. 上传字体到myfonts,并进入目录 window字体目录 C:\Windows\Fonts
4. 开始安装 # 更新字体库索引 mkfontscale mkfontdir # 更新字体缓存 fc-cache</content></entry><entry><title>Bbb视频会议系统搭建</title><url>https://itvita.cn/2021/03/13/%E8%AE%AE%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA.html</url><categories><category>其他</category></categories><tags><tag>其他</tag></tags><content type="html"> 安装 要先准备云服务器，域名。
更新镜像 1、备份配置文件：
cp -a /etc/apt/sources.list /etc/apt/sources.list.bak
2、修改sources.list文件，将http://archive.ubuntu.com和http://security.ubuntu.com替换成http://mirrors.huaweicloud.com，可以参考如下命令：
sed -i "s@http://.*archive.ubuntu.com@http://mirrors.huaweicloud.com@g" /etc/apt/sources.list sed -i "s@http://.*security.ubuntu.com@http://mirrors.huaweicloud.com@g" /etc/apt/sources.list 3、执行apt-get update更新索引
继续更新服务器，按顺序逐行执行命令
grep "multiverse" /etc/apt/sources.list 执行完此命令后如果没有看到
deb http://archive.ubuntu.com/ubuntu trusty multiverse 或者
deb http://archive.ubuntu.com/ubuntu trusty main restricted universe multiverse 则执行
echo "deb http://us.archive.ubuntu.com/ubuntu/ trusty multiverse" | sudo tee -a /etc/apt/sources.list 然后执行命令
sudo apt-get update sudo apt-get dist-upgrade 接下来安装LibreOffice（ppt转换工具）
sudo apt-get install software-properties-common sudo add-apt-repository ppa:libreoffice/libreoffice-4-4 然后根据官网安装（首先要配置防火墙） http://docs.bigbluebutton.org/2.2/install.html#4--install-bigbluebutton
安装过程需要一晚上~
安装demo
配置ssl
问题 问题详细提示如下:
E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarly unavailable)
E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is an other process using it?
如何解决这种问题呢?
　2.1 首先查看是否有apt-get这个程序在运行
ps aux|grep apt-get 　2.2 如果发现存在这样的程序在运行那么就kill掉，否则执行2.3
　2.3 直接删除锁文件
sudo rm /var/lib/dpkg/lock-frontend sudo rm /var/lib/dpkg/lock 报错1007： ICE协商失败** -浏览器和FreeSWITCH尝试协商用于流媒体的端口，并且协商失败。可能的原因：
NAT阻止了连接 防火墙阻止UDP连接/端口 更新 FreeSWITCH配置
http://docs.bigbluebutton.org/2.2/configure-firewall.html#update-freeswitch
报错1020 ，无法启用视频 http://docs.bigbluebutton.org/2.2/configure-firewall.html#extra-steps-when-server-is-behind-nat
Kurento安装方法 安装gunpg
apt-getupdate\````&amp;&amp;apt-get``install``--no-``install``-recommends--``yes``\````gnupg2、确定ubuntu版本
cat` `/etc/issue``Ubuntu 18.04.2 LTS \n \l ``#输出 3、设置变量（根据上一步的结果 ，下面2行选1行执行）
# Run ONLY ONE of these lines:``DISTRO=``"xenial"` `# KMS for Ubuntu 16.04 (Xenial)``DISTRO=``"bionic"` `# KMS for Ubuntu 18.04 (Bionic) 4、添加key
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83 5、设置kurento.list
tee` `"/etc/apt/sources.list.d/kurento.list"` `>``/dev/null` `&lt;`# Kurento Media Server - Release packages``deb [arch=amd64] http:``//ubuntu``.openvidu.io``/6``.10.0 $DISTRO kms6``EOF 注：这一步的作用，实际就是在"/etc/apt/sources.list.d/kurento.list" 这个文件中，追加一行deb [arch=amd64] http://ubuntu.openvidu.io/6.10.0 $DISTRO kms6。
执行时，terminal终端中，按顺序把上面4行，都复制进去就行（注：1个字符都不要少）
6、安装kurento media server
apt-getupdate\````&amp;&amp;apt-get``install``--``yes``kurento-media-server7、启动/停止
sudo``servicekurento-media-serverstart``sudo``servicekurento-media-serverstopError: Unable to connect to the FreeSWITCH Event Socket Layer on port 8021 FreeSWITCH无法绑定到端口8021 FreeSWITCH支持IPV4和IPV6。但是，如果您的服务器不支持IPV6，则FreeSWITCH将无法绑定到端口8021。如果运行sudo bbb-conf --check并看到以下错误
# Error: Found text in freeswitch.log: # # Thread ended for mod_event_socket # # FreeSWITCH may not be responding to requests on port 8021 (event socket layer) # and users may have errors joining audio. # 可能是您的服务器已禁用IPV6（或不支持它）。您可以通过运行以下命令进行检查
$ sudo ip addr | grep inet6 inet6 ::1/128 scope host ... 如果看不到该行inet6 ::1/128 scope host，则您的服务器已禁用IPV6。在这种情况下，我们需要禁用FreeSWITCH对IPV6的支持。首先，编辑/opt/freeswitch/etc/freeswitch/autoload_configs/event_socket.conf.xml并更改行
&lt;param name="listen-ip" value="::"/> 至
&lt;param name="listen-ip" value="127.0.0.1"/> 这告诉FreeSWITCH，不是将端口8021绑定到本地IPV6地址，而是绑定到IPV4地址127.0.0.1。接下来，执行以下两个命令
$ sudo mv /opt/freeswitch/etc/freeswitch/sip_profiles/internal-ipv6.xml /opt/freeswitch/etc/freeswitch/sip_profiles/internal-ipv6.xml_ $ sudo mv /opt/freeswitch/etc/freeswitch/sip_profiles/external-ipv6.xml /opt/freeswitch/etc/freeswitch/sip_profiles/external-ipv6.xml_ 然后使用命令重新启动BigBlueButton
$ sudo bbb-conf --clean $ sudo bbb-conf --check</content></entry><entry><title>App无法打开或已损坏解决办法</title><url>https://itvita.cn/2021/03/03/%E5%BC%80%E6%88%96%E5%B7%B2%E6%8D%9F%E5%9D%8F%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url><categories><category>MAC</category></categories><tags><tag>mac</tag></tags><content type="html"> 1、系统偏好设置&hellip; -> 安全性与隐私&ndash;>修改为任何来源
2、如果没有任何来源 ,打开终端执行:sudo spctl &ndash;master-disable
如果还不行
sudo xattr -d com.apple.quarantine /Applications/Navicat\ for\ SQL\ Server.app
/Applications/Navicat\ for\ SQL\ Server.app 为app路径
如果有空格，空格前加 \</content></entry><entry><title>AOP统数据库统一字段处理</title><url>https://itvita.cn/2021/02/02/%E5%BA%93%E7%BB%9F%E4%B8%80%E5%AD%97%E6%AE%B5%E5%A4%84%E7%90%86.html</url><categories><category>SpringBoot</category></categories><tags><tag>aop</tag></tags><content type="html"> package com.itvita.norisk.company.config; import com.itvita.norisk.company.model.dto.CmpUserDto; import com.itvita.norisk.company.util.SystemUtil; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.springframework.beans.BeanWrapper; import org.springframework.beans.BeanWrapperImpl; import org.springframework.context.annotation.Configuration; import java.time.LocalDateTime; /** * @Time: 2021/5/27 11:16 * @author: liu.q [916000612@qq.com] * @des: 统一处理公共数据库字段 * */ @Aspect @Configuration public class SqlAopConfig { @Pointcut("execution(* com.itvita.norisk.company.mapper.*.insert(..))") public void excudeAddService() { } @Pointcut("execution(* com.itvita.norisk.company.mapper.*.updateById(..))") public void excudeUpdateService() { } @Around("excudeAddService()") public Object addAround(ProceedingJoinPoint thisJoinPoint) { try { Object[] args = thisJoinPoint.getArgs(); // myBatis只能传递一个参数 if (args != null &amp;&amp; args.length > 0) { Object argument = args[0]; BeanWrapper beanWrapper = new BeanWrapperImpl(argument); CmpUserDto cmpUserDto = SystemUtil.getCmpUserDto(); beanWrapper.setPropertyValue("createdBy", cmpUserDto.getId()); beanWrapper.setPropertyValue("createdName", cmpUserDto.getNickName()); beanWrapper.setPropertyValue("createdTime", LocalDateTime.now()); } return thisJoinPoint.proceed(args); } catch (Throwable e) { e.printStackTrace(); } return null; } @Around("excudeUpdateService()") public Object UpdAround(ProceedingJoinPoint thisJoinPoint) { try { Object[] args = thisJoinPoint.getArgs(); // myBatis只能传递一个参数 if (args != null &amp;&amp; args.length > 0) { Object argument = args[0]; BeanWrapper beanWrapper = new BeanWrapperImpl(argument); CmpUserDto cmpUserDto = SystemUtil.getCmpUserDto(); beanWrapper.setPropertyValue("updatedBy", cmpUserDto.getId()); beanWrapper.setPropertyValue("updatedName", cmpUserDto.getNickName()); beanWrapper.setPropertyValue("updatedTime", LocalDateTime.now()); } return thisJoinPoint.proceed(args); } catch (Throwable e) { e.printStackTrace(); } return null; } }</content></entry><entry><title>Afd-Lib组件帮助文档</title><url>https://itvita.cn/2021/02/02/b%E7%BB%84%E4%BB%B6%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.html</url><categories><category>NPM</category></categories><tags><tag>vue</tag><tag>插件</tag></tags><content type="html"> 视频预览列表 点击播放
示例 &lt;template> &lt;div> &lt;lz-video url="path" :data-list="videoDataList" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return { videoDataList: [ { path: 'http://127.0.0.1:8080/1.mp4' }, { path: 'http://127.0.0.1:8080/3.mp4' } ] } }, created () {}, mounted () {}, methods: {} } &lt;/script> &lt;style>&lt;/style> 属性说明 属性 说明 类型 默认值 url dataList 中视频访问地址key String path dataList 视频列表 Array baseUrl url跟地址 String '' 基础上传按钮 一般用于工具条，不回显上传结果。
示例 &lt;template> &lt;div> &lt;lz-btn-upload @beforeUpload="beforeUpload" @doneUpload="doneUpload" label="导入" accept=".xlsx,.xls" action="http://localhost:8102/base/common/upload/image" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return {} }, created () {}, mounted () {}, methods: { beforeUpload (values) { console.log('导入前', values) }, doneUpload (values) { console.log('导入后', values) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 label 组件名称 String 导入 size 允许上传文件大小 单位MB Number 2 accept 允许上传文件类型 String action 文件上传路径 String 事件 事件名称 说明 回调参数 beforeUpload 文件开始上传前调用 function(values) doneUpload 文件上传完成后调用 function(values) values说明 { file:File, id: "1qgc04h0lsclr7bhtcby" name: "文件名.xlsx" original: "源文件路径" path: "压缩文件路径" state: 2 //状态，1开始上传，2上传成功，3上传失败 } 文件上传 常用于表单，可以预览，下载。
示例 &lt;template> &lt;div> &lt;lz-upload v-model="uploadList" :max-num="5" :size="5" @change="change" @beforeUpload="beforeUpload" @doneUpload="doneUpload" accept=".jpg,.png,.xlsx,.doc,.docx" :disabled="false" basePath="https://echftp.yqzhfw.com/" action="https://jmy.yqzhfw.com/train/api/base-server/base/common/upload/image" :replaceFields="{ name: 'name', path: 'path', original: 'original', size: 'size', suffix: 'suffix', }" :showDownload="true" /> &lt;!-- :step="{ size: 2048 }" --> &lt;/div> &lt;/template> &lt;script> export default { data () { return { uploadList: [ // { // name: "音频服务.png", // path: "/basis/2020/7/10/13acde2b08e84fc7bae4e9c0195facfc.png", // }, ] } }, methods: { change (param) { console.log('change', param) }, beforeUpload (param) { console.log('beforeUpload', param) }, doneUpload (param) { console.log('doneUpload', param) } } } &lt;/script> 属性 属性 说明 类型 默认值 value(v-model) 设置上传文件默认值 Array [] max-num 允许最大文件数 Number 0 size 单位MB Number 2 accept 允许上传文件类型 String 几乎所有文件 disabled 是否禁用 boolean false imgBasePath 文件访问跟路径 String action 文件上传路径 String replaceFields 结果 key替换 Object { name: &lsquo;name&rsquo;, path: &lsquo;path&rsquo;, original: &lsquo;original&rsquo;, size: &lsquo;size&rsquo;, suffix: &lsquo;suffix&rsquo;, } step 开启分片上传 Object false step说明 属性 说明 类型 默认值 size 分片大小，单位kb Number 无 事件 事件名称 说明 回调参数 change 文件发生改变后调用 values beforeUpload 文件上传前回调 values doneUpload 文件上传结束回调 values values举例 [{ name: "音频服务.png", path: "/basis/2020/7/10/13acde2b08e84fc7bae4e9c0195facfc.png", }] 树形下拉 示例 &lt;template> &lt;div> &lt;lz-tree-select ref="dTreeSelect" :replaceFields="{ key: 'id', value: 'value', title: 'title', children: 'children', }" v-model="treeSelect" @change="change" :multiple="false" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return { treeSelect: ['0-0', '0-0-1'] } }, created () {}, mounted () { this.$refs.dTreeSelect.init([ { title: 'Node1', value: '0-0', id: '0-0', children: [ { value: '0-0-1', id: '0-0-1', title: 'title' }, { title: 'Child Node2', value: '0-0-2', id: '0-0-2' } ] }, { title: 'Node2', value: '0-1', id: '0-1' } ]) }, methods: { change (val) { console.log(val) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 replaceFields 替换结果集中key，value,title，children为对应字段 Object { key: &lsquo;key&rsquo;, value:&lsquo;value&rsquo;,
title: &lsquo;title&rsquo;, children: &lsquo;children&rsquo; } v-model(value) 绑定值单选时String ，多选时 Array String/Array multiple 是否开启多选 Boolean false asyncLoad 异步加载数据 function（node） - asyncLoad说明 asyncLoad ({ id }) { return new Promise((resolve) => { this.$axios({ url: 'http://localhost:7001/api/xxx/getTree', params: { pid: id } }).then((res) => { resolve(res.data) }) }) } 方法 属性 说明 举例 init 数据初始化 this.$refs.dTreeSelect.init([]) //初始化一个空数组 事件 事件名称 说明 回调参数 change 选中值改变触发 function(value) 树形 示例 &lt;template> &lt;div> &lt;lz-tree ref="dTree" :replaceFields="{ key: 'key', title: 'title', children: 'children', }" @click="nodeClick" :asyncLoad="false" > &lt;/d-tree> &lt;/div> &lt;/template> &lt;script> export default { data () { return { treeData: [ { title: 'Node1', value: '0-0', key: '0-0', children: [ { value: '0-0-1', key: '0-0-1', title: 'title' }, { title: 'Child Node2', value: '0-0-2', key: '0-0-2' } ] }, { title: 'Node2', value: '0-1', key: '0-1' } ] } }, created () {}, mounted () { this.$refs.dTree.init(this.treeData) }, methods: { nodeClick (param) { console.log(param) }, asyncLoad ({ id }) { return new Promise((resolve) => { this.$axios({ url: 'http://localhost:7001/api/xxx/getTree', params: { pid: id } }).then((res) => { resolve(res.data) // 子节点数据 [] }) }) }, refresh () { this.$refs.dTree.refreshByPid(0, function () { console.log('刷新完成') }) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 replaceFields 替换结果集中key，title，children为对应字段 Object { key: &lsquo;key&rsquo;, title: &lsquo;title&rsquo;, children: &lsquo;children&rsquo; } asyncLoad 异步加载数据 （不需要异步可不配置） function（node） - 事件 事件名称 说明 回调参数 click 节点点击事件 function(value) 方法 方法名称 参数 说明 init 树形数组 初始化数据，异步时可以传空数组[] refreshByPid id,callback 要刷新的节点ID，刷新完成回调 时间选择器 示例 &lt;template> &lt;div> &lt;lz-time-picker v-model="timePicker" @change="change">&lt;/d-time-picker> &lt;/div> &lt;/template> &lt;script> export default { data () { return { timePicker: '' } }, created () {}, mounted () {}, methods: { change (value) { console.log(value) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定值 String '' allowClear 是否显示清空按钮 Boolean false disabled 是否禁用 Boolean false format 日期格式 String HH:mm:ss hourStep 小时选项间隔 Number 1 minuteStep 分钟选项间隔 Number 1 secondStep 秒选项间隔 Number 1 placeholder 没有值的时候显示的内容 String '' size 文本框大小[large,default,small] String default inputReadOnly 设置输入框为只读（避免在移动设备上打开虚拟键盘) Boolean true 事件 事件名称 说明 回调参数 change 值改变事件 function(value) 文本显示 示例 &lt;template> &lt;div> &lt;lz-text value="测试" color="primary" @click="handelClick" /> &lt;/div> &lt;/template> &lt;script> export default { components: {}, data () { return {} }, created () {}, mounted () {}, methods: { handelClick (value) { console.log(value) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 value 显示值 String '' color 显示颜色【primary,success,warning,error】 String default 事件 事件名称 说明 回调参数 click 点击事件 function(value) table表格 示例 &lt;template> &lt;div> &lt;lz-table ref="myTable"> &lt;div slot="tools"> &lt;a-button icon="plus" @click="getSelect" type="primary">获取选中项id&lt;/a-button> &lt;/div> &lt;/d-table> &lt;/div> &lt;/template> &lt;script> export default { data () { return {} }, created () {}, mounted () { this.tableInit() }, methods: { search (param) { this.$refs.myTable.search(param) }, tableInit () { this.$refs.myTable.init( { url: 'http://localhost:9001/xxxx/getList', columns: [ { field: 'title', title: '名称', sorter: 'true', align: 'left', width: 150 }, { field: 'path', title: '路由/权限', align: 'left', width: 150 }, { field: 'icons', title: '图标', align: 'left', width: 100, hidden: true }, { field: 'menuType', title: '类型', sorter: 'true', align: 'center', width: 80, formatter: { type: 'text', format: (row) => { if (row.menuType === 0) { return { value: '目录' } } else if (row.menuType === 1) { return { value: '菜单' } } else if (row.menuType === 2) { return { value: '按钮' } } else { return { value: '-' } } } } }, { field: 'seq', title: '顺序号', sorter: 'true', align: 'right', width: 120 } ], operate: { items: [ { label: '编辑', color: 'primary', event: (row) => { console.log(row) } }, { label: '删除', color: 'danger', event: (row) => { this.$confirm({ title: '确认删除？', content: '删除后将无法恢复！', onOk: () => { console.log(row) } }) } } ] } }, () => { this.search() } ) }, getSelect () { console.log(this.$refs.myTable.getSelected()) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 是否必填 类型 默认值 url 请求链接 是 String method 请求方式 否 post/get get pagination 是否显示分页 否 boolean true queryParams 默认参数 否 Object {} pageNumber 初始化加载第一页，默认第一页 否 Number 1 pageSize 每页的记录行数（*） 否 Number 10 pageList 可供选择的每页的行数 否 Array [10, 25, 50, 100] showColumns 是否显示所有的列 否 boolean true showRefresh 是否显示刷新按钮 否 boolean true changeSize 允许改变列大小 否 boolean true showCheckBox 显示复选框 否 boolean false showIndex 显示序号 否 boolean true height 行高，如果没有设置height属性，表格自动根据记录条数设置表格高度 否 Number 500 columns 定义列 是 Array operate 定义操作 否 Object columns 属性 说明 是否必填 类型 默认值 field 字段名 是 String - title 显示名 是 String - sorter 是否可以排序 否 Boolean false width 宽度 ，不配置则自适应宽度 否 Integer 自适应 align 对齐方式 可选：left center right 否 String left hidden 是否隐藏 否 Boolean false formatter 如下示例 ： 否 Object - columns列配置示例 基本配置 [ { field: 'title', //字段名 title: '标签名称', //显示名 sorter: true, //是否可以排序 width:200,//宽度 ，不配置则自适应宽度 align: 'left',//对齐方式 可选：left center right hidden: false }, 。。。 ] 格式化文本 多用于标题，可通过点击事件查看详情
{ field: 'title', title: '名称', sorter: 'true', align: 'left', width: 100, formatter: { type: 'text', //格式化方式 format: row => { return { value: row.title, //显示文本（必填） color: 'primary', // 显示颜色 'primary','danger','success','warning','info','default' event:()=>{ // 点击触发事件 // ... } } } } } 格式化显示图片 可用于头像等需要显示图片的列
{ field: 'headImage', title: '状态', sorter: 'true', align: 'center', width: 100, formatter: { type: 'image', //格式化方式 format: row => { return { name:'',// 名称 url:'' // 图片路径 } } } } 格式化为图文 同上，但图片右侧可配置显示的文字
{ field: 'name', title: '状态', sorter: 'true', align: 'center', width: 100, formatter: { type: 'image-text', //格式化方式 format: row => { return { name:'',// 名称 url:'' // 图片路径 text:[ //显示文本内容， 建议一行或两行 { content:'显示文本' }, { content:'显示文本' } ] } } } } 格式化为开关按钮 不建议使用
{ field: 'state', title: '状态', sorter: 'true', align: 'center', width: 100, formatter: { type: 'switch', //格式化方式 format: row => { return { value:true,// 是否选中 true | false change:()=>{// change事件回调 const v = !row.state // ... } } } } } 格式化为徽章 常用于展示各种状态
{ field: 'state', title: '状态', sorter: 'true', align: 'center', width: 100, formatter: { type: 'badge', //格式化方式 format: row => { return { value:'审核通过', color:'blue'//徽章颜色'blue','green','gray','orange','yellow','red' 等支持16进制 } } } } operate 属性 说明 是否必填 类型 默认值 width 操作列宽度 否 Integer 自适应 items 操作配置 是 Array - items 属性 说明 是否必填 类型 默认值 label 显示名称 是 String - permission 权限标识 否 String - color 显示颜色【primary,success,danger,warning..】 是 String - event 点击事件 是 Function(row) hidden 隐藏条件 是 Function(row) operate配置示例 operate: { width: 200, items: [ { label: '编辑', color: 'primary', event: row => { this.$refs.edit.showModal(row.id) }, hidden: row => { return row.roleType === 1 } }, { label: '置顶', color: 'success', event: row => { update({ id: row.id, isTop: 1 }).then(res => { if (res.code === 1) { this.$message.success('置顶成功') this.search() } }) }, hidden: row => { return row.isTop === 1 } }, { label: '取消置顶', color: 'danger', event: row => { update({ id: row.id, isTop: 0 }).then(res => { if (res.code === 1) { this.$message.success('取消成功') this.search() } }) }, hidden: row => { return row.isTop !== 1 } }, { label: '删除', color: 'danger', event: row => { this.$confirm({ title: '确认删除？', content: '删除后将无法恢复！', onOk: () => { dels([row.id]).then(res => { if (res.code === 1) { this.$message.success('删除成功') this.$refs.myTable.selectedRowKeys = [] this.search() } }) } }) } } ] } 方法 方法名称 参数 返回结果 说明 selectedRowKeys - [id,id,id] 获取选中的key selectedRows - [{row},{row},{row}] 获取选中的行 search JSON - 执行搜索{pageNumber:1}=搜索第一页 getSelected - {selectedRowKeys,selectedRows} 获取选中的行与选中的key setSelected selectedRowKeys,selectedRows - 设置选中项 关于列表多选，需要保留结果的，建议使用多选选择器
搜索条 常配合table表格使用位于table上方的搜索条件
示例 &lt;template> &lt;div> &lt;lz-search ref="searchBar" :column="3" :items="items" @search="search" @reset="reset">&lt;/d-search> &lt;a-button @click="getSearchValues">获取搜索参数&lt;/a-button> &lt;a-button style="margin-left:10px;" @click="setSearchValues">设置搜索值&lt;/a-button> &lt;div>{{ searchValue }}&lt;/div> &lt;/div> &lt;/template> &lt;script> import items from './items' export default { data () { return { items, searchValue: {} } }, created () {}, mounted () {}, methods: { reset () { console.log('重置搜索条件') }, search (param) { this.searchValue = param }, getSearchValues () { this.searchValue = this.$refs.searchBar.getValues() }, setSearchValues () { this.$refs.searchBar.setValues({ title: '测试标题', state: 0, dates: ['2020-10-10', '2020-11-11'] }) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 items 搜索条件配置 Array [] column 每行显示多少列 Number 3 items示例 export default [ //文本 { type: 'text', //组件类型 dataIndex: 'name', //组件key label: '名称', //组件显示名称 }, //下拉静态数据 { type: 'select', dataIndex: 'state', label: '状态', options: [ //选项配置 { label: '启用',//名称 value: '1' //值 }, { label: '禁用', value: '0' } ] }, //下拉动态数据 { type: 'select', dataIndex: 'state', label: '状态', options: [], optionsConfig: { //动态数据配置 url:'http://localhost:8102/base/classify/getAll',//数据请求地址result:{code:1,content:[]} label: 'title',// label对应key 不设置默认label value: 'id' //value 对应key 不设置默认value } }, //树形下拉 { type: 'tree-select', dataIndex: 'dept', label: '树形下拉', defaultValue: '', allowLv: '>=0',//允许选择层级的条件===n,!==n ,>=n ,&lt;=n,>n,&lt;n,false 不使用条件(不使用条件时，可通过返回结果内增加disabled=[true|false]控制是否可选) asyncLoad:false,//是否开启数据懒加载（开启后会在请求url上增加参数?pid=value） optionsConfig: { url:'http://localhost:8102/base/classify/getAll',//数据请求地址result:{code:1,content:[{label,value,lv,[disabled]}]} label: 'title',// label对应key 不设置默认title value: 'id', //value 对应key 不设置默认value lv: 'lv'//层级 不设置 默认 lv } }, //日期范围 { type: 'range-picker', dataIndex: 'dates', label: '日期范围', }, //月选择框 { type: 'month-picker', dataIndex: 'month', label: '月份选择', } ] 事件 事件名称 说明 回调参数 search 点击搜索 function(values) reset 点击重置 function() 方法 方法名称 参数 返回结果 说明 getValues - Object 获取当前搜索条件 setSearchValues Object - 设置当前搜索条件 报表 需结合报表服务
示例 &lt;template> &lt;div> &lt;lz-report ref="dReport" :domain="domain" reportId="ff80808174d28d1b0174d2b88a730000" reportName="验收单" > &lt;a-button @click="hideModal">关闭&lt;/a-button> &lt;/d-report> &lt;/div> &lt;/template> &lt;script> export default { data () { return { domain: 'http://xxxxxx' // 报表服务的跟地址 } }, created () {}, mounted () { this.$refs.dReport.init({ orderId: 1, brandId: 123 }, () => {}) }, methods: {} } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 domain 报表服务跟域名 Array 必填 reportId 报表配置ID String 必填 reportName 报表名称 String 报表 solt 插槽，可插入操作按钮 - - 方法 方法名称 参数 返回结果 说明 init JSON - 初始化报表，参数为配置报表时所需参数 报表导出 依赖报表服务
示例 &lt;template> &lt;div> &lt;lz-export-tools ref="lzExportTools" domain="http://localhost:7001" reportId="ff80808174d28d1b0174d43fb7e40001" reportName="测试导出" @click="exportClick" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return {} }, created () {}, mounted () {}, methods: { exportClick () { this.$refs.dExportTools.exportExcel({ keyword: 'ceshi' }) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 domain 报表服务跟域名 Array 必填 reportId 报表配置ID String 必填 reportName 报表名称 String 报表 方法 方法名称 参数 返回结果 说明 exportWord JSON - 导出word exportExcel JSON - 导出excel exportPdf JSON - 导出pdf 日期选择器 示例 &lt;template> &lt;div> &lt;lz-date-picker v-model="datePicker" :show-time="{ format: 'HH:mm', }" :show-today="false" @change="dateChange" :disabledDate="disabledDate" /> &lt;/div> &lt;/template> &lt;script> import moment from 'moment' export default { data () { return { datePicker: '2020-10-10' } }, created () {}, mounted () {}, methods: { dateChange (values) { console.log(values) }, disabledDate (current) { // 只能选择今天之前 return current &amp;&amp; current > moment().endOf('day') } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定值 Array [] allowClear 是否展示清除按钮 Boolean false disabled 禁用全部操作 Boolean false format 展示的时间格式 String YYYY-MM-DD placeholder 没有值的时候显示的内容 Array [] size 文本框大小[large,default,small] String default inputReadOnly 设置输入框为只读（避免在移动设备上打开虚拟键盘） Boolean true showToday 是否展示“今天”按钮 Boolean true showTime 显示时间选择器 [Object, Boolean] false disabledDate 禁用日期 [Function, Boolean] false disabledTime 禁用时间 [Function, Boolean] false 事件 事件名称 说明 回调参数 change 选择值改变 function(values) 日期范围选择器 示例 &lt;template> &lt;div> &lt;lz-range-picker v-model="rangePicker" format="YYYY-MM-DD HH:mm" :showTime="{ format: 'HH:mm', }" :disabled-date="disabledDate" :placeholder="['开始日期','结束日期']" >&lt;/d-range-picker> &lt;/div> &lt;/template> &lt;script> import moment from 'moment' export default { data () { return { rangePicker: ['', ''] } }, created () {}, mounted () {}, methods: { disabledDate (current) { // 禁止点击今天与今天之前的日志 return current &amp;&amp; current &lt; moment().endOf('day') } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定值 Array [] allowClear 是否展示清除按钮 Boolean false disabled 禁用全部操作 Boolean false format 展示的时间格式 String YYYY-MM-DD placeholder 没有值的时候显示的内容 Array [] size 文本框大小[large,default,small] String default inputReadOnly 设置输入框为只读（避免在移动设备上打开虚拟键盘） Boolean true showTime 显示时间选择器 [Object, Boolean] false disabledDate 禁用日期 [Function, Boolean] false disabledTime 禁用时间 [Function, Boolean] false showRanges 显示扩展按钮 Boolean true 事件 事件名称 说明 回调参数 change 选择值改变 function(values) 单选选择器 示例 &lt;template> &lt;div> &lt;lz-one-selector :action="action" :replaceFields="{ title: 'cateName,cateCode', description: 'createTime', }" v-model="selector" @change="handelChange" :show-description="true" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return { selector: null, action: 'http://xxx' } }, created () {}, mounted () {}, methods: { handelChange (values) { console.log(values) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定值 Object null action 左侧数据请求url（自动附加请求参数：pageSize，pageNumber，keyword） String '' replaceFields 显示的内容可以用(,)分割在一行展示多列 Object { title: &lsquo;title,code&rsquo;, description: &lsquo;createTime&rsquo;,} showDescription 是否显示描述行 Boolean true 事件 事件名称 说明 回调参数 change 结果发生改变时调用 function(values) 多选选择器 示例 &lt;template> &lt;div> &lt;lz-multiple-selector :action="action" :replaceFields="{ title: 'title,code', description: 'note', }" v-model="selector" :show-description="false" @change="handelChange" /> &lt;/div> &lt;/template> &lt;script> export default { data () { return { selector: [], action: 'http://xxx' } }, created () {}, mounted () {}, methods: { handelChange (values) { console.log(values) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定值 Object null action 左侧数据请求url（自动附加请求参数：pageSize，pageNumber，keyword） String '' replaceFields 显示的内容可以用(,)分割在一行展示多列 Object { title: &lsquo;title,code&rsquo;, description: &lsquo;createTime&rsquo;,} showDescription 是否显示描述行 Boolean true 事件 事件名称 说明 回调参数 change 结果发生改变时调用 function(values) 月选择 示例 &lt;template> &lt;div> &lt;lz-month-picker v-model="month" :disabledDate="disabledDate" /> &lt;/div> &lt;/template> &lt;script> import moment from 'moment' export default { data () { return { month: null } }, created () {}, mounted () {}, methods: { disabledDate (current) { // 只能选择今天及以前的月 return current &amp;&amp; current > moment().endOf('day') } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定值 String null allowClear 是否展示清除按钮 Boolean false disabled 禁用全部操作 Boolean false format 展示格式 String YYYY-MM placeholder 没有值的时候显示的内容 String '' size 文本框大小[large,default,small] String default inputReadOnly 设置输入框为只读（避免在移动设备上打开虚拟键盘） Boolean true disabledDate 禁用日期 [Function, Boolean] false 事件 事件名称 说明 回调参数 change 结果发生改变时调用 function(values) 图片列表 示例 &lt;template> &lt;div> &lt;lz-image url="path" :data-list="dataList" width="100px" height="100px" > &lt;/d-image>&lt;/div> &lt;/template> &lt;script> export default { data () { return { dataList: [ { path: 'https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1595555863&amp;di=170ed927a6ae5b36f478e5b222d05816&amp;src=http://a3.att.hudong.com/14/75/01300000164186121366756803686.jpg' }, { path: 'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1595565947814&amp;di=88ad5be9f62cf469215501c5abe970a0&amp;imgtype=0&amp;src=http%3A%2F%2Fa4.att.hudong.com%2F22%2F59%2F19300001325156131228593878903.jpg' }, { path: 'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1595565947814&amp;di=88ad5be9f62cf469215501c5abe970a0&amp;imgtype=0&amp;src=http%3A%2F%2Fa4.att.hudong.com%2F22%2F59%2F19300001325156131228593878903.jpg' }, { path: 'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1595565947814&amp;di=88ad5be9f62cf469215501c5abe970a0&amp;imgtype=0&amp;src=http%3A%2F%2Fa4.att.hudong.com%2F22%2F59%2F19300001325156131228593878903.jpg' }, { path: 'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1595565947814&amp;di=88ad5be9f62cf469215501c5abe970a0&amp;imgtype=0&amp;src=http%3A%2F%2Fa4.att.hudong.com%2F22%2F59%2F19300001325156131228593878903.jpg' }, { path: 'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1595565947814&amp;di=88ad5be9f62cf469215501c5abe970a0&amp;imgtype=0&amp;src=http%3A%2F%2Fa4.att.hudong.com%2F22%2F59%2F19300001325156131228593878903.jpg' } ] } }, created () {}, mounted () {}, methods: {} } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 data-list 图片列表数据 Array [] url 图片列表中对应url的地址dataIndex String url baseUrl 图片访问跟地址 String '' width 图片宽 String 100px height 图片高 String 100px 高德地图坐标拾取 示例 &lt;template> &lt;div> &lt;lz-map-choose-address map-key="87ff1e887140aa980a075c096a434940" placeholder="请设置地址" v-model="chooseArddr" @change="chooseArddrChange" /> 选择结果：{{ chooseArddr }} &lt;/div> &lt;/template> &lt;script> export default { data () { return { chooseArddr: null // { // addr: '河南省郑州市金水区文化路街道河南省农业科学院1', // lat: '34.788996', // lng: '113.679317' // } } }, created () {}, mounted () {}, methods: { chooseArddrChange (val) { console.log(val) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定数据 Object null placeholder 数据空时提示 String '' mapKey 高德地图申请的key String 必填 事件 事件名称 说明 回调参数 change 结果发生改变时调用 function(values) 树形 适用于授权等，层级不限，最后一级横排。
效果 示例 &lt;template> &lt;div> &lt;lz-auth-tree v-model="checkedKeys" :items="treeData" @change="change" /> &lt;/div> &lt;/template> &lt;script> export default { components: {}, data () { return { checkedKeys: ['1323994360672419840'], treeData: [ { children: [ { pid: '1323994360672419840', menuType: 2, id: '1323995046420152320', title: '分类管理' }, { pid: '1323994360672419840', menuType: 2, id: '1323997514642227200', title: '文章管理' }, { pid: '1323994360672419840', menuType: 2, id: '1335853728959299584', title: '用户管理' } ], pid: '0', menuType: 1, id: '1323994360672419840', title: 'IT生活' }, { children: [ { pid: '1322770188088639488', menuType: 2, id: '1322803882748805120', title: '用户管理' }, { pid: '1322770188088639488', menuType: 2, id: '1322774696441151488', title: '菜单管理' }, { pid: '1322770188088639488', menuType: 2, id: '1322803959471013888', title: '角色管理' } ], pid: '0', menuType: 1, id: '1322770188088639488', title: '系统管理' } ] } }, created () {}, mounted () {}, methods: { change (e) { console.log(e) } } } &lt;/script> &lt;style>&lt;/style> 属性 属性 说明 类型 默认值 v-model(value) 绑定数据 Array [] items 渲染数据 Array(树形)[{id:xx,title:xx}] [] 事件 事件名称 说明 回调参数 change 结果发生改变时调用 function(values)</content></entry><entry><title>亚马逊awsVpn配置</title><url>https://itvita.cn/2021/01/01/vpn%E9%85%8D%E7%BD%AE.html</url><categories><category>其他</category></categories><tags><tag>vpn</tag></tags><content type="html"> 注册亚马逊aws账号购买海外服务器 注册地址：https://aws.amazon.com/cn/ec2/?nc2=h_ql_prod_fs_ec2&amp;ec2-whats-new.sort-by=item.additionalFields.postDateTime&amp;ec2-whats-new.sort-order=desc 提前准备：身份证号，信用卡（需要短期冻结1刀） 注册成功安装EC2 > Ubuntu18系统 > 生成密钥(vpn.pem)并下载
使用脚本自动安装vpn https://github.com/itvita/setup-ipsec-vpn/blob/master/README-zh.md 开放端口
进入安全组放开TCP 4500 &amp; 500 端口 进入安全组放开UDP 4500 &amp; 500 端口 打开电脑终端连接主机
chmod 400 vpn.pem // 修改文件权限,vpn.pem是刚刚下载的密钥文件名 ssh -i 'vpn.pem' ubuntu@公有DNS // 连接主机，进入主机操作 使用IPSec协议搭建L2TP VPN
wget https://git.io/vpnsetup -O vpnsetup.sh //下载vpnsetup.sh文件到当前目录 nano -w vpnsetup.sh // 编辑vpnsetup.sh内容 设置YOUR_IPSEC_PSK，YOUR_USERNAME，YOUR_PASSWORD
YOUR_IPSEC_PSK='itvita.cn' YOUR_USERNAME='itvita' YOUR_PASSWORD='YOUR_PASSWORD' 执行脚本
sudo sh vpnsetup.sh // 运行vpnsetup.sh脚本 sudo vim ipsec.scerets // 编辑ipsec.secrets // 修改为：私有IP %any :PSK "YOUR_IPSEC_PSK"</content></entry><entry><title>代码生成器</title><url>https://itvita.cn/2021/01/01/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8.html</url><categories><category>其他</category><category>Vue</category><category>springboot</category></categories><tags><tag>代码生成器</tag><tag>vue</tag></tags><content type="html"> 本仓库为 https://gitee.com/itvita/code-generator 的 前端页面，vue开发。
代码启动 yarn run serve
可独立使用 表单设计器， 与表格设计器。 服务端代码生成器依赖后端服务
如果对你有用，欢迎star ，欢迎fork 可下载发行版本地启动测试。 https://gitee.com/itvita/code-generator/releases
感谢 JetBrains 提供的许可证证书 https://www.jetbrains.com/?form=MAC
gitee： https://gitee.com/itvita
我的博客 https://itvita.cn
软件架构 springboot
启动访问 localhost:8686
服务端代码生成 通过数据源根据模板生成服务端代码
暂只支持mysql，服务端目前只适用我在使用的框架，可能需要自行下载源码修改。
前端代码生成 发现做用不大，没继续搞。
表单设计 通过拖拽生成 ant-design ui 源码
支持行布局
支持实时预览
支持源码预览
支持 json 预览
支持一键复制
支持一键导出
表格设计 自定义搜索条
自定义工具条
动态配置数据咧
动态配置操作列
实时在线预览
支持一键复制源代码 &amp; 在线查看源代码
支持一键导出
table数据接口要求
{ "code": 1, "msg": "请求成功", "data": { "rows": [{},{},{}], "pageNumber":1, "pageSize":10, "pages":1, "size":3 } } 我的赞赏码 项目内置的前端代码为编译后的，如需源码，移步至 https://gitee.com/itvita/code-generator-views
如果对你有用，欢迎star ，欢迎fork</content></entry><entry><title>Tomcat调优</title><url>https://itvita.cn/2020/11/11/%E8%B0%83%E4%BC%98.html</url><categories><category>springboot</category></categories><tags><tag>tomcat</tag></tags><content type="html"> 常用配置
## 等待队列长度，默认100。 server.tomcat.accept-count=1000 ## 最大工作线程数，默认200。（4核8g内存，线程数经验值800，操作系统做线程之间的切换调度是有系统开销的，所以不是越多越好。） server.tomcat.max-threads=800 ## 最小工作空闲线程数，默认10。（适当增大一些，以便应对突然增长的访问量） server.tomcat.min-spare-threads=100 修改长链接keepAlive相关配置，保证路由策略的性能高效。
/** * 当Spring容器内没有TomcatEmbeddedServletContainerFactory这个bean时，会把此bean加载金spring容器中 */ @Component public class WebServerConfiguration implements WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory>{ @Override public void customize(ConfigurableWebServerFactory factory) { // 使用对应工厂类提供给我们的接口定制化我们的tomcat connector ((TomcatServletWebServerFactory) factory).addConnectorCustomizers(new TomcatConnectorCustomizer() { @Override public void customize(Connector connector) { Http11AprProtocol protocol = (Http11AprProtocol) connector.getProtocolHandler(); // 定制化keepAliveTimeout，设置30秒内没有请求则服务端自动断开keepalive链接 protocol.setKeepAliveTimeout(300000); // 当客户端发送超过10000个请求则自动断开keepalive链接 protocol.setMaxKeepAliveRequests(10000); } }); } }</content></entry><entry><title>Markdown修改字体、颜色</title><url>https://itvita.cn/2020/11/11/md%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93%E3%80%81%E9%A2%9C%E8%89%B2.html</url><categories><category>markdown</category></categories><tags><tag>markdown</tag></tags><content type="html"> 字体 &lt;font face="微软雅黑">我是微软雅黑&lt;/font> 字号 &lt;font size='72'>72大小的字体&lt;/font> 颜色 &lt;font color='#0099ff'>变个颜色&lt;/font> 颜色名 十六进制颜色值 颜色 AliceBlue #F0F8FF rgb(240, 248, 255) AntiqueWhite #FAEBD7 rgb(250, 235, 215) Aqua #00FFFF rgb(0, 255, 255) Aquamarine #7FFFD4 rgb(127, 255, 212) Azure #F0FFFF rgb(240, 255, 255) Beige #F5F5DC rgb(245, 245, 220) Bisque #FFE4C4 rgb(255, 228, 196) Black #000000 rgb(0, 0, 0) BlanchedAlmond #FFEBCD rgb(255, 235, 205) Blue #0000FF rgb(0, 0, 255) BlueViolet #8A2BE2 rgb(138, 43, 226) Brown #A52A2A rgb(165, 42, 42) BurlyWood #DEB887 rgb(222, 184, 135) CadetBlue #5F9EA0 rgb(95, 158, 160) Chartreuse #7FFF00 rgb(127, 255, 0) Chocolate #D2691E rgb(210, 105, 30) Coral #FF7F50 rgb(255, 127, 80) CornflowerBlue #6495ED rgb(100, 149, 237) Cornsilk #FFF8DC rgb(255, 248, 220) Crimson #DC143C rgb(220, 20, 60) Cyan #00FFFF rgb(0, 255, 255) DarkBlue #00008B rgb(0, 0, 139) DarkCyan #008B8B rgb(0, 139, 139) DarkGoldenRod #B8860B rgb(184, 134, 11) DarkGray #A9A9A9 rgb(169, 169, 169) DarkGreen #006400 rgb(0, 100, 0) DarkKhaki #BDB76B rgb(189, 183, 107) DarkMagenta #8B008B rgb(139, 0, 139) DarkOliveGreen #556B2F rgb(85, 107, 47) Darkorange #FF8C00 rgb(255, 140, 0) DarkOrchid #9932CC rgb(153, 50, 204) DarkRed #8B0000 rgb(139, 0, 0) DarkSalmon #E9967A rgb(233, 150, 122) DarkSeaGreen #8FBC8F rgb(143, 188, 143) DarkSlateBlue #483D8B rgb(72, 61, 139) DarkSlateGray #2F4F4F rgb(47, 79, 79) DarkTurquoise #00CED1 rgb(0, 206, 209) DarkViolet #9400D3 rgb(148, 0, 211) DeepPink #FF1493 rgb(255, 20, 147) DeepSkyBlue #00BFFF rgb(0, 191, 255) DimGray #696969 rgb(105, 105, 105) DodgerBlue #1E90FF rgb(30, 144, 255) Feldspar #D19275 rgb(209, 146, 117) FireBrick #B22222 rgb(178, 34, 34) FloralWhite #FFFAF0 rgb(255, 250, 240) ForestGreen #228B22 rgb(34, 139, 34) Fuchsia #FF00FF rgb(255, 0, 255) Gainsboro #DCDCDC rgb(220, 220, 220) GhostWhite #F8F8FF rgb(248, 248, 255) Gold #FFD700 rgb(255, 215, 0) GoldenRod #DAA520 rgb(218, 165, 32) Gray #808080 rgb(128, 128, 128) Green #008000 rgb(0, 128, 0) GreenYellow #ADFF2F rgb(173, 255, 47) HoneyDew #F0FFF0 rgb(240, 255, 240) HotPink #FF69B4 rgb(255, 105, 180) IndianRed #CD5C5C rgb(205, 92, 92) Indigo #4B0082 rgb(75, 0, 130) Ivory #FFFFF0 rgb(255, 255, 240) Khaki #F0E68C rgb(240, 230, 140) Lavender #E6E6FA rgb(230, 230, 250) LavenderBlush #FFF0F5 rgb(255, 240, 245) LawnGreen #7CFC00 rgb(124, 252, 0) LemonChiffon #FFFACD rgb(255, 250, 205) LightBlue #ADD8E6 rgb(173, 216, 230) LightCoral #F08080 rgb(240, 128, 128) LightCyan #E0FFFF rgb(224, 255, 255) LightGoldenRodYellow #FAFAD2 rgb(250, 250, 210) LightGrey #D3D3D3 rgb(211, 211, 211) LightGreen #90EE90 rgb(144, 238, 144) LightPink #FFB6C1 rgb(255, 182, 193) LightSalmon #FFA07A rgb(255, 160, 122) LightSeaGreen #20B2AA rgb(32, 178, 170) LightSkyBlue #87CEFA rgb(135, 206, 250) LightSlateBlue #8470FF rgb(132, 112, 255) LightSlateGray #778899 rgb(119, 136, 153) LightSteelBlue #B0C4DE rgb(176, 196, 222) LightYellow #FFFFE0 rgb(255, 255, 224) Lime #00FF00 rgb(0, 255, 0) LimeGreen #32CD32 rgb(50, 205, 50) Linen #FAF0E6 rgb(250, 240, 230) Magenta #FF00FF rgb(255, 0, 255) Maroon #800000 rgb(128, 0, 0) MediumAquaMarine #66CDAA rgb(102, 205, 170) MediumBlue #0000CD rgb(0, 0, 205) MediumOrchid #BA55D3 rgb(186, 85, 211) MediumPurple #9370D8 rgb(147, 112, 216) MediumSeaGreen #3CB371 rgb(60, 179, 113) MediumSlateBlue #7B68EE rgb(123, 104, 238) MediumSpringGreen #00FA9A rgb(0, 250, 154) MediumTurquoise #48D1CC rgb(72, 209, 204) MediumVioletRed #C71585 rgb(199, 21, 133) MidnightBlue #191970 rgb(25, 25, 112) MintCream #F5FFFA rgb(245, 255, 250) MistyRose #FFE4E1 rgb(255, 228, 225) Moccasin #FFE4B5 rgb(255, 228, 181) NavajoWhite #FFDEAD rgb(255, 222, 173) Navy #000080 rgb(0, 0, 128) OldLace #FDF5E6 rgb(253, 245, 230) Olive #808000 rgb(128, 128, 0) OliveDrab #6B8E23 rgb(107, 142, 35) Orange #FFA500 rgb(255, 165, 0) OrangeRed #FF4500 rgb(255, 69, 0) Orchid #DA70D6 rgb(218, 112, 214) PaleGoldenRod #EEE8AA rgb(238, 232, 170) PaleGreen #98FB98 rgb(152, 251, 152) PaleTurquoise #AFEEEE rgb(175, 238, 238) PaleVioletRed #D87093 rgb(216, 112, 147) PapayaWhip #FFEFD5 rgb(255, 239, 213) PeachPuff #FFDAB9 rgb(255, 218, 185) Peru #CD853F rgb(205, 133, 63) Pink #FFC0CB rgb(255, 192, 203) Plum #DDA0DD rgb(221, 160, 221) PowderBlue #B0E0E6 rgb(176, 224, 230) Purple #800080 rgb(128, 0, 128) Red #FF0000 rgb(255, 0, 0) RosyBrown #BC8F8F rgb(188, 143, 143) RoyalBlue #4169E1 rgb(65, 105, 225) SaddleBrown #8B4513 rgb(139, 69, 19) Salmon #FA8072 rgb(250, 128, 114) SandyBrown #F4A460 rgb(244, 164, 96) SeaGreen #2E8B57 rgb(46, 139, 87) SeaShell #FFF5EE rgb(255, 245, 238) Sienna #A0522D rgb(160, 82, 45) Silver #C0C0C0 rgb(192, 192, 192) SkyBlue #87CEEB rgb(135, 206, 235) SlateBlue #6A5ACD rgb(106, 90, 205) SlateGray #708090 rgb(112, 128, 144) Snow #FFFAFA rgb(255, 250, 250) SpringGreen #00FF7F rgb(0, 255, 127) SteelBlue #4682B4 rgb(70, 130, 180) Tan #D2B48C rgb(210, 180, 140) Teal #008080 rgb(0, 128, 128) Thistle #D8BFD8 rgb(216, 191, 216) Tomato #FF6347 rgb(255, 99, 71) Turquoise #40E0D0 rgb(64, 224, 208) Violet #EE82EE rgb(238, 130, 238) VioletRed #D02090 rgb(208, 32, 144) Wheat #F5DEB3 rgb(245, 222, 179) White #FFFFFF rgb(255, 255, 255) WhiteSmoke #F5F5F5 rgb(245, 245, 245) Yellow #FFFF00 rgb(255, 255, 0) YellowGreen #9ACD32 rgb(154, 205, 50)</content></entry><entry><title>关于我</title><url>https://itvita.cn/about.html</url><categories/><tags/><content type="html"> Hugo是用Go编写的一个开放源代码静态站点生成器，可在Apache许可证2.0下使用。 Hugo支持TOML, YAML和JSON数据文件类型，Markdown和HTML内容文件，并使用短代码添加丰富的内容。其他值得注意的功能包括分类法、多语言模式、图像处理、自定义输出格式、HTML/CSS/JS缩小和对Sass SCSS工作流的支持。
Hugo使用了多种开源项目，包括:
https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo是博客、企业网站、创意作品集、在线杂志、单页应用程序甚至是数千页的网站的理想选择。
Hugo适合那些想要手工编写自己的网站代码，而不用担心设置复杂的运行时、依赖关系和数据库的人。
使用Hugo建立的网站非常快速、安全，可以部署在任何地方，包括AWS、GitHub Pages、Heroku、Netlify和任何其他托管提供商。
更多信息请访问GitHub.</content></entry></search>